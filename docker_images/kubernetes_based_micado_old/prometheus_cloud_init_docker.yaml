#cloud-config
packages:
  - mysql-server
  - unzip
  - dnsmasq

groups:
- prometheus

users:
- name: prometheus
  gecos: Prometheus server
  primary-group: prometheus
  system: true


write_files:
# consul config
- content: |
    {
    "server": true,
    "datacenter": "dataavenue",
    "encrypt": "uohStneoKEoVYZIASGp6Nw==",
    "log_level": "INFO",
    "enable_syslog": false,
    "service": { "name": "prometheus" }
    }
  path: /etc/consul/config.json

# set hostname
- content: |
    #!/bin/sh
    if [ $reason = "BOUND" ]; then
        oldhostname=$(hostname -s)
        if [ $oldhostname != $new_host_name ]; then
            # Rename Host
            echo $new_host_name > /etc/hostname
            hostname -F /etc/hostname
            # Update /etc/hosts if needed
            TMPHOSTS=/etc/hosts.dhcp.new
            if ! grep "$new_ip_address $new_host_name.$new_domain_name $new_host_name" /etc/hosts; then
                # Remove the 127.0.1.1 put there by the debian installer
                grep -v '127\.0\.1\.1 ' < /etc/hosts > $TMPHOSTS
                # Add the our new ip address and name
                echo "$new_ip_address $new_host_name.$new_domain_name $new_host_name" >> $TMPHOSTS
                mv $TMPHOSTS /etc/hosts
            fi
            # Recreate SSH2 keys
            export DEBIAN_FRONTEND=noninteractive 
            dpkg-reconfigure openssh-server
        fi
    fi
  path: /etc/dhcp/dhclient-exit-hooks.d/sethostname
#------------------

# Prometheus config
- path: /etc/prometheus/prometheus.yml
  content: |
    rule_files:
    - 'prometheus.rules'
    scrape_configs:
    - job_name: cluster_monitoring
      scrape_interval: 10s
      consul_sd_configs:
      - server: '172.31.0.5:8500'
        datacenter: dataavenue
        services: ['da_cluster']
      relabel_configs:
      - source_labels: ['__meta_consul_service']
        regex:         '(.*)'
        target_label:  'job'
        replacement:   '$1'
      - source_labels: ['__meta_consul_service']
        regex:         '(.*)'
        target_label:  'group'
        replacement:   '$1'
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "172.31.0.3:9093"

# Prometheus rules (expressions and alerts)
- path: /etc/prometheus/prometheus.rules
  content: |
    da_cpu_utilization = 100 - (avg (rate(node_cpu{group="da_cluster",mode="idle"}[60s])) * 100)

    da_ram_utilization = (sum(node_memory_MemFree{job="da_cluster"}) / sum(node_memory_MemTotal{job="da_cluster"})) * 100

    da_hdd_utilization = sum(node_filesystem_free{job="da_cluster",mountpoint="/", device="rootfs"}) / sum(node_filesystem_size{job="da_cluster",mountpoint="/", device="rootfs"}) *100

    ALERT da_overloaded
      IF da_cpu_utilization > 80
      FOR 3m
      LABELS {alert="overloaded", cluster="da_cluster", node="da", infra_id="{{infra_id}}"}
      ANNOTATIONS {
      summary = "DA cluster overloaded",
      description = "DA cluster average CPU utilization is overloaded"}
    ALERT da_underloaded
      IF da_cpu_utilization < 20
      FOR 3m
      LABELS {alert="underloaded", cluster="da_cluster", node="da", infra_id="{{infra_id}}"}
      ANNOTATIONS {
      summary = "DA cluster underloaded",
      description = "DA cluster average CPU utilization is underloaded"}

# alertmanager
- path: /etc/alertmanager/config.yml
  content: |
    global:
    
    # The root route on which each incoming alert enters.
    # The root route with all parameters, which are inherited by the child
    # routes if they are not overwritten.
    route:
      receiver: 'default'
      group_wait: 10s
      group_interval: 20s
      repeat_interval: 5m
      group_by: [cluster, alertname]
    
    receivers:
    - name: 'default'
      webhook_configs: 
       - url: http://172.31.0.4:9095

# executor config
- path: /etc/prometheus_executor/conf.sh
  content: |
    #!/bin/bash
    
    if [[ "$AMX_STATUS" != "firing" ]]; then
      exit 0
    fi
    
    over_loaded() {
      curl -X POST http://{{variables.occopus_ip}}:5000/infrastructures/$1/scaleup/$2
    }
    
    under_loaded() {
      curl -X POST http://{{variables.occopus_ip}}:5000/infrastructures/$1/scaledown/$2
    }
    
    main() {
      for i in $(seq 1 "$AMX_ALERT_LEN"); do
        alert="AMX_ALERT_${i}_LABEL_alert"
        infra="AMX_ALERT_${i}_LABEL_infra_id"
        node="AMX_ALERT_${i}_LABEL_node"
    
        if [ "${!alert}" = "overloaded" ]
        then
            over_loaded "${!infra}" "${!node}"
        else
            under_loaded "${!infra}" "${!node}"
        fi
      done
      wait
    }

    main "$@"

# Kubernetes master configuration
- path: /etc/Kubernetes/master_config.yaml
  content: |
    apiVersion: kubeadm.k8s.io/v1alpha1
    kind: MasterConfiguration
    api:
      bindPort: 6443
    discovery:
      bindPort: 9898
    kubernetesVersion: v1.5.1
    networking:
      dnsDomain: cluster
      serviceSubnet: 10.96.0.0/12
    secrets:
      givenToken: aafedd.b6c89b8a714aa45b

runcmd:
  - sudo dhclient
  - chmod 777 /etc/prometheus_executor/conf.sh
  # Docker, Kubernetes Install
  - apt-get update
  - apt-get install -y apt-transport-https ca-certificates
  - apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D 
  - echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | tee /etc/apt/sources.list.d/docker.list
  - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update
  - apt-get install -y docker-engine kubelet kubeadm kubectl kubernetes-cni
  - service docker start
  - usermod -aG docker $USER
  - systemctl enable docker
  - kubeadm init --config /etc/Kubernetes/master_config.yaml && kubectl apply -f https://git.io/weave-kube

  - docker network create -d bridge my-net --subnet 172.31.0.0/24
  - docker run -d --network=my-net --ip="172.31.0.2" -p 9090:9090 -v /etc/:/etc prom/prometheus
  - docker run -d --network=my-net --ip="172.31.0.3" -v /etc/alertmanager/:/etc/alertmanager/ -p 9093:9093 prom/alertmanager
  - docker run -d --network=my-net --ip="172.31.0.4" -p 9095:9095 -v /etc/prometheus_executor/:/etc/prometheus_executor docker-registry.lpds.sztaki.hu/prometheus_executor
  - export IP=$(hostname --ip-address)
  - docker run -d --network=my-net --ip="172.31.0.5" -p 8301:8301 -p 8300:8300 -p 8302:8302/udp -p 8400:8400 -p 8500:8500 -p 8600:8600/udp -v /etc/consul/:/etc/consul  -e 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt":true}'  consul agent -server -client=0.0.0.0 -advertise=$IP  -bootstrap=true -config-file=/etc/consul/config.json
